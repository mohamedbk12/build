import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import React from 'react';
import AppList from './app-list';
import CategorizedAppList from './categorized-app-list';

var Apps =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Apps, _React$Component);

  function Apps(props, context) {
    var _this;

    _classCallCheck(this, Apps);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Apps).call(this, props, context));
    props.manager.watch(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {
      consents: props.manager.consents
    };
    return _this;
  }

  _createClass(Apps, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var manager = this.props.manager;
      manager.unwatch(this);
    }
  }, {
    key: "update",
    value: function update(obj, type, data) {
      var manager = this.props.manager;
      if (obj == manager && type == 'consents') this.setState({
        consents: data
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          config = _this$props.config,
          t = _this$props.t,
          ns = _this$props.ns,
          manager = _this$props.manager;
      var consents = this.state.consents;
      var apps = config.apps,
          categories = config.categories;

      var toggleAll = function toggleAll(value) {
        apps.map(function (app) {
          manager.updateConsent(app, value);
        });
      };

      var enableAll = function enableAll() {
        return toggleAll(true);
      };

      var disableAll = function disableAll() {
        return toggleAll(false);
      };

      var allDisabled = apps.filter(function (app) {
        return app.required || false ? false : consents[app.name];
      }).length === 0;
      var allEnabled = apps.filter(function (app) {
        return consents[app.name];
      }).length === apps.length;
      var someOptional = apps.some(function (app) {
        return !app.required;
      });
      return React.createElement("div", null, someOptional ? React.createElement("div", {
        className: ns('AppToggles')
      }, React.createElement("button", {
        type: "button",
        className: ns('Button Button--info AppToggles-button AppToggles-enableAll'),
        disabled: allEnabled,
        onClick: enableAll
      }, t(['acceptAll'])), React.createElement("button", {
        type: "button",
        className: ns('Button Button--info AppToggles-button AppToggles-disableAll'),
        disabled: allDisabled,
        onClick: disableAll
      }, t(['declineAll']))) : null, categories ? React.createElement(CategorizedAppList, {
        t: t,
        ns: ns,
        categories: categories,
        apps: apps,
        consents: consents,
        onToggle: manager.updateConsent.bind(manager)
      }) : React.createElement(AppList, {
        t: t,
        ns: ns,
        apps: apps,
        consents: consents,
        onToggle: manager.updateConsent.bind(manager)
      }));
    }
  }]);

  return Apps;
}(React.Component);

export { Apps as default };